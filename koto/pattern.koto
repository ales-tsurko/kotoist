import koto
from test import assert, assert_eq, assert_near
from number import infinity

as_iter = |value|
  if koto.type(value) == "Iterator"
    loop
      next = value.next()
      if next == () then break
      yield next
  else
    loop
      yield value

rrand = |min, max|
  return (random.number() * (max - min)) + min

rand = |val|
  return random.number() * val

rand2 = |val|
  return random.number() * val * 2 - val

fold = |val, lo, hi|
  x = val - lo

  # avoid the divide if possible
  if val >= hi 
    val = hi + hi - val
    if val >= lo
      return val
  else if val < lo
    val = lo + lo - val
    if val < hi
      return val
  else
    return val

  if hi == lo
    return lo

  # ok do the divide
  range = hi - lo
  range2 = range + range
  c = x - range2 * (x / range2).floor()
  if c >= range
    c = range2 - c

  return c + lo

pbeta = |lo, hi, prob1, prob2, length|
  lo_iter = as_iter lo
  hi_iter = as_iter hi
  prob1_iter = as_iter prob1
  prob2_iter = as_iter prob2
  lo_val = ()
  hi_val = ()

  while length > 0
    rprob1 = prob1_iter.next()
    rprob2 = prob2_iter.next()

    if rprob1 == () or rprob2 == ()
      yield ()
      break

    rprob1 = rprob1.recip()
    rprob2 = rprob2.recip()

    lo_val = lo_iter.next()
    hi_val = hi_iter.next()

    if lo_val == () or hi_val == ()
      yield ()
      break

    sum = 2
    temp = 0

    while sum > 1
      temp = random.number().pow(rprob1)
      sum = temp + random.number().pow(rprob2)

    yield ((temp / sum) * (hi_val - lo_val)) + lo_val

    length -= 1

pbrown = |lo, hi, step, length|
  lo_iter = as_iter lo
  hi_iter = as_iter hi
  step_iter = as_iter step

  lo_val = lo_iter.next()
  hi_val = hi_iter.next()
  step_val = step_iter.next()

  if lo_val == () or hi_val == () or step_val == ()
    yield ()
    return

  cur = rrand lo_val, hi_val

  while length > 0
    lo_val = lo_iter.next()
    hi_val = hi_iter.next()
    step_val = step_iter.next()

    if lo_val == () or hi_val == () or step_val == ()
      yield ()
      break

    next = cur + rand2(step_val)
    cur = fold(next, lo_val, hi_val)

    yield cur

    length -= 1

pcauchy = |mean, spread, length|

pseq = |list, repeats|
  while repeats > 0
    for event in list
      if koto.type(event) == "Iterator"
        loop
          next = event.next()
          if next == () then break
          yield next
      else
        yield event
    repeats -= 1


export @tests =

  @test as_iter: ||
    foo = as_iter 42
    bar = as_iter (0..=2).iter()

    for _ in (0..10)
      assert_eq foo.next(), 42

    assert_eq bar.next(), 0
    assert_eq bar.next(), 1
    assert_eq bar.next(), 2
    assert_eq bar.next(), ()

  @test rrand: ||
    expected = [
      -1.2,
      3.469957416803331,
      -0.5,
      0.6902665517461255,
      -4.2,
      1.2452560333025064,
      -1.3,
      2.021086948798768,
      0.5944838253701086,
      -1.2,
      2.2390825654974087,
      -1.2,
      -0.6,
      -3.0,
      2.652270958284124,
      1.319258871135501,
      1.3631716977544475,
      2.5323785612426306,
      -3.5,
      -0.9
    ]
    random.seed 1
    for n in (0..20)
      assert_near expected[n], rrand(5, -5), 0.1

  @test rand2: ||
    expected = [
      1.1870385830140222,
      -3.5,
      0.46718513136948303,
      -0.7,
      4.229941062594593,
      -1.2,
      1.3320208812485959,
      -2.0,
      -0.6,
      1.1719347584951194,
      -2.2,
      1.2042587403034766,
      0.6401493513957837,
      3.0197016659333222,
      -2.7,
      -1.3,
      -1.4,
      -2.5,
      3.4839803191568848,
      0.8963610833390785
    ]
    random.seed 1
    for n in (0..20)
      assert_near rand2(5), expected[n], 0.1

  @test fold: ||
    expected = [
      2.812961416985978,
      2.5300425831966695,
      2.467185131369483,
      2.6902665517461255,
      2.229941062594593,
      2.7547439666974936,
      2.667979118751404,
      2.021086948798768,
      2.5944838253701086,
      2.8280652415048806,
      2.2390825654974087,
      2.7957412596965234,
      2.6401493513957837,
      2.9802983340666778,
      2.6522709582841237,
      2.680741128864499,
      2.6368283022455525,
      2.5323785612426306,
      2.5160196808431152,
      2.8963610833390785,
    ]
    random.seed(1)
    for n in (0..20)
      assert_near fold(rand2(5), 2, 3), expected[n], 0.000001

  @test pbeta: ||
    iter = pbeta 0, 1, 0.1, 0.1, infinity
    expected = [
      0.9999991445264916,
      0.9152024196110354,
      0.999875903336608,
      0.9994692080756311,
      0.03319654811950952,
      0.0003044408621467811,
      0.028751099344361247,
      0.011023335524190322,
      0.9797386852643469,
      0.9743803780361755,
      0.3407028163560437,
      0.9999999999999301,
      0.7631398280331377,
      0.9946581942463375,
      0.9816463243418938,
      0.25330909537521223,
      0.9999999221592342,
      0.9999148879416475,
      0.8848777651792713,
      0.9272571307795654
    ]

    random.seed(1)

    for n in (0..20)
      assert_near iter.next(), expected[n], 0.000001

  @test pbrown: ||
    iter = pbrown 0, 1, 0.1, infinity
    expected = [
      0.5493047099653355,
      0.5586484125927252,
      0.5448430815578027,
      0.6294419028096946,
      0.6045367821436445,
      0.6311771997686164,
      0.5907554607926411,
      0.5788657842852389,
      0.6023044794551413,
      0.5575228281451932,
      0.5816080029512627,
      0.5944109899791784,
      0.6548050232978448,
      0.6017596041321623,
      0.5753744267094523,
      0.5481109927543634,
      0.49746342152951073,
      0.5671430279126484,
      0.58507024957943,
      0.5621729750717894,
    ]
    random.seed(1)
    for n in (0..20)
      assert_near iter.next(), expected[n], 0.00001
    
  @test pseq: ||
    foo = pseq (0..=2), infinity

    assert_eq foo.next(), 0
    assert_eq foo.next(), 1
    assert_eq foo.next(), 2
    assert_eq foo.next(), 0

    foo = pseq [pseq([0,2], 2), pseq([1,3], 2)], 2

    # TODO iterators are not copyable at the moment:
    # https://github.com/koto-lang/koto/issues/90
    # So we can't reuse/reset them
    # for _ in (0..2)
    assert_eq foo.next(), 0
    assert_eq foo.next(), 2
    assert_eq foo.next(), 0
    assert_eq foo.next(), 2
    assert_eq foo.next(), 1
    assert_eq foo.next(), 3
    assert_eq foo.next(), 1
    assert_eq foo.next(), 3
